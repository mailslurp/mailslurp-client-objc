#import <Foundation/Foundation.h>
#import "OAIAttachmentMetaData.h"
#import "OAIEmail.h"
#import "OAIForwardEmailOptions.h"
#import "OAIPageEmailProjection.h"
#import "OAIRawEmailJson.h"
#import "OAIUnreadCount.h"
#import "OAIValidationDto.h"
#import "OAIApi.h"

/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
*
* The version of the OpenAPI document: 67c9a1eda264be4cfe0bb2c76151f0aadf0862bc
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIEmailControllerApi: NSObject <OAIApi>

extern NSString* kOAIEmailControllerApiErrorDomain;
extern NSInteger kOAIEmailControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Delete all emails
/// Deletes all emails in your account. Be careful as emails cannot be recovered
///
/// 
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return void
-(NSURLSessionTask*) deleteAllEmailsWithCompletionHandler: 
    (void (^)(NSError* error)) handler;


/// Delete an email
/// Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
///
/// @param emailId emailId
/// 
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return void
-(NSURLSessionTask*) deleteEmailWithEmailId: (NSString*) emailId
    completionHandler: (void (^)(NSError* error)) handler;


/// Get email attachment bytes
/// Returns the specified attachment for a given email as a byte stream (file download). You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
///
/// @param attachmentId attachmentId
/// @param emailId emailId
/// @param apiKey Can pass apiKey in url for this request if you wish to download the file in a browser (optional)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSData*
-(NSURLSessionTask*) downloadAttachmentWithAttachmentId: (NSString*) attachmentId
    emailId: (NSString*) emailId
    apiKey: (NSString*) apiKey
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Forward email
/// Forward an existing email to new recipients.
///
/// @param emailId emailId
/// @param forwardEmailOptions forwardEmailOptions
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) forwardEmailWithEmailId: (NSString*) emailId
    forwardEmailOptions: (OAIForwardEmailOptions*) forwardEmailOptions
    completionHandler: (void (^)(NSError* error)) handler;


/// Get email attachment metadata
/// Returns the metadata such as name and content-type for a given attachment and email.
///
/// @param attachmentId attachmentId
/// @param emailId emailId
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIAttachmentMetaData*
-(NSURLSessionTask*) getAttachmentMetaDataWithAttachmentId: (NSString*) attachmentId
    emailId: (NSString*) emailId
    completionHandler: (void (^)(OAIAttachmentMetaData* output, NSError* error)) handler;


/// Get all email attachment metadata
/// Returns an array of attachment metadata such as name and content-type for a given email if present.
///
/// @param emailId emailId
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<OAIAttachmentMetaData>*
-(NSURLSessionTask*) getAttachmentsWithEmailId: (NSString*) emailId
    completionHandler: (void (^)(NSArray<OAIAttachmentMetaData>* output, NSError* error)) handler;


/// Get email content
/// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
///
/// @param emailId emailId
/// @param decode Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional) (default to @(NO))
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIEmail*
-(NSURLSessionTask*) getEmailWithEmailId: (NSString*) emailId
    decode: (NSNumber*) decode
    completionHandler: (void (^)(OAIEmail* output, NSError* error)) handler;


/// Get email content as HTML
/// Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: `?apiKey=xxx`
///
/// @param emailId emailId
/// @param decode decode (optional) (default to @(NO))
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSString*
-(NSURLSessionTask*) getEmailHTMLWithEmailId: (NSString*) emailId
    decode: (NSNumber*) decode
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get all emails
/// By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
///
/// @param inboxId Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)
/// @param page Optional page index in email list pagination (optional) (default to @0)
/// @param size Optional page size in email list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param unreadOnly Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional) (default to @(NO))
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIPageEmailProjection*
-(NSURLSessionTask*) getEmailsPaginatedWithInboxId: (NSArray<NSString*>*) inboxId
    page: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    unreadOnly: (NSNumber*) unreadOnly
    completionHandler: (void (^)(OAIPageEmailProjection* output, NSError* error)) handler;


/// Get raw email string
/// Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
///
/// @param emailId emailId
/// 
///  code:200 message:"text/plain raw email",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSString*
-(NSURLSessionTask*) getRawEmailContentsWithEmailId: (NSString*) emailId
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get raw email in JSON
/// Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
///
/// @param emailId emailId
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIRawEmailJson*
-(NSURLSessionTask*) getRawEmailJsonWithEmailId: (NSString*) emailId
    completionHandler: (void (^)(OAIRawEmailJson* output, NSError* error)) handler;


/// Get unread email count
/// Get number of emails unread
///
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIUnreadCount*
-(NSURLSessionTask*) getUnreadEmailCountWithCompletionHandler: 
    (void (^)(OAIUnreadCount* output, NSError* error)) handler;


/// Validate email
/// Validate the HTML content of email if HTML is found. Considered valid if no HTML.
///
/// @param emailId emailId
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIValidationDto*
-(NSURLSessionTask*) validateEmailWithEmailId: (NSString*) emailId
    completionHandler: (void (^)(OAIValidationDto* output, NSError* error)) handler;



@end
