#import <Foundation/Foundation.h>
#import "OAIAttachmentMetaData.h"
#import "OAIEmail.h"
#import "OAIForwardEmailOptions.h"
#import "OAIPageEmailProjection.h"
#import "OAIValidationDto.h"
#import "OAIApi.h"

/**
* MailSlurp API
* ## Introduction  [MailSlurp](https://www.mailslurp.com) is an Email API for developers and QA testers. It let's users: - create emails addresses on demand - receive emails and attachments in code - send templated HTML emails  ## About  This page contains the REST API documentation for MailSlurp. All requests require API Key authentication passed as an `x-api-key` header.  Create an account to [get your free API Key](https://app.mailslurp.com/sign-up/).  ## Resources - üîë [Get API Key](https://app.mailslurp.com/sign-up/)                    - üéì [Developer Portal](https://www.mailslurp.com/docs/)           - üì¶ [Library SDKs](https://www.mailslurp.com/docs/) - ‚úçÔ∏è [Code Examples](https://www.mailslurp.com/examples) - ‚ö†Ô∏è [Report an issue](https://drift.me/mailslurp)  ## Explore  
*
* The version of the OpenAPI document: 6.5.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIEmailControllerApi: NSObject <OAIApi>

extern NSString* kOAIEmailControllerApiErrorDomain;
extern NSInteger kOAIEmailControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Delete all emails
/// Deletes all emails
///
/// 
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return void
-(NSURLSessionTask*) deleteAllEmailsWithCompletionHandler: 
    (void (^)(NSError* error)) handler;


/// Delete Email
/// Deletes an email and removes it from the inbox
///
/// @param emailId emailId
/// 
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return void
-(NSURLSessionTask*) deleteEmailWithEmailId: (NSString*) emailId
    completionHandler: (void (^)(NSError* error)) handler;


/// Get email attachment
/// Returns the specified attachment for a given email as a byte stream (file download). Get the attachmentId from the email response.
///
/// @param attachmentId attachmentId
/// @param emailId emailId
/// @param apiKey Can pass apiKey in url for this request if you wish to download the file in a browser (optional)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSData*
-(NSURLSessionTask*) downloadAttachmentWithAttachmentId: (NSString*) attachmentId
    emailId: (NSString*) emailId
    apiKey: (NSString*) apiKey
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Forward Email
/// Forward email content to given recipients
///
/// @param emailId emailId
/// @param forwardEmailOptions forwardEmailOptions
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) forwardEmailWithEmailId: (NSString*) emailId
    forwardEmailOptions: (OAIForwardEmailOptions*) forwardEmailOptions
    completionHandler: (void (^)(NSError* error)) handler;


/// Get email attachment metadata
/// Returns the metadata such as name and content-type for a given attachment and email.
///
/// @param attachmentId attachmentId
/// @param emailId emailId
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIAttachmentMetaData*
-(NSURLSessionTask*) getAttachmentMetaDataWithAttachmentId: (NSString*) attachmentId
    emailId: (NSString*) emailId
    completionHandler: (void (^)(OAIAttachmentMetaData* output, NSError* error)) handler;


/// Get all email attachment metadata
/// Returns an array of attachment metadata such as name and content-type for a given email if present.
///
/// @param emailId emailId
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<OAIAttachmentMetaData>*
-(NSURLSessionTask*) getAttachmentsWithEmailId: (NSString*) emailId
    completionHandler: (void (^)(NSArray<OAIAttachmentMetaData>* output, NSError* error)) handler;


/// Get Email Content
/// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
///
/// @param emailId emailId
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIEmail*
-(NSURLSessionTask*) getEmailWithEmailId: (NSString*) emailId
    completionHandler: (void (^)(OAIEmail* output, NSError* error)) handler;


/// Get all emails
/// Responses are paginated
///
/// @param inboxId Optional inbox ids to filter by. Can be repeated (optional)
/// @param page Optional page index in email list pagination (optional) (default to @0)
/// @param size Optional page size in email list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param unreadOnly Optional filter for unread emails only (optional) (default to @(NO))
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIPageEmailProjection*
-(NSURLSessionTask*) getEmailsPaginatedWithInboxId: (NSArray<NSString*>*) inboxId
    page: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    unreadOnly: (NSNumber*) unreadOnly
    completionHandler: (void (^)(OAIPageEmailProjection* output, NSError* error)) handler;


/// Get Raw Email Content
/// Returns a raw, unparsed and unprocessed email
///
/// @param emailId emailId
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSString*
-(NSURLSessionTask*) getRawEmailContentsWithEmailId: (NSString*) emailId
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Validate email
/// Validate HTML content of email
///
/// @param emailId emailId
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIValidationDto*
-(NSURLSessionTask*) validateEmailWithEmailId: (NSString*) emailId
    completionHandler: (void (^)(OAIValidationDto* output, NSError* error)) handler;



@end
