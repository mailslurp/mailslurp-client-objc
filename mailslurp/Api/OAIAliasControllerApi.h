#import <Foundation/Foundation.h>
#import "OAIAlias.h"
#import "OAICreateAnonymousAliasOptions.h"
#import "OAICreateOwnedAliasOptions.h"
#import "OAIPageAlias.h"
#import "OAIApi.h"

/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
*
* The version of the OpenAPI document: 6.5.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIAliasControllerApi: NSObject <OAIApi>

extern NSString* kOAIAliasControllerApiErrorDomain;
extern NSInteger kOAIAliasControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create an email alias
/// Create an email alias belonging to a user ID. To create anonymous aliases use the `createAnonymousAlias` method.
///
/// @param createOwnedAliasOptions createOwnedAliasOptions
/// 
///  code:201 message:"Created",
///  code:202 message:"Accepted",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) createAliasWithCreateOwnedAliasOptions: (OAICreateOwnedAliasOptions*) createOwnedAliasOptions
    completionHandler: (void (^)(NSError* error)) handler;


/// Create an anonymous email alias
/// 
///
/// @param createAnonymousAliasOptions createAnonymousAliasOptions
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIAlias*
-(NSURLSessionTask*) createAnonymousAliasWithCreateAnonymousAliasOptions: (OAICreateAnonymousAliasOptions*) createAnonymousAliasOptions
    completionHandler: (void (^)(OAIAlias* output, NSError* error)) handler;


/// Delete an owned alias
/// 
///
/// @param aliasId aliasId
/// 
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return void
-(NSURLSessionTask*) deleteAliasWithAliasId: (NSString*) aliasId
    completionHandler: (void (^)(NSError* error)) handler;


/// Get an email alias
/// Get an email alias by ID
///
/// @param aliasId aliasId
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIAlias*
-(NSURLSessionTask*) getAliasWithAliasId: (NSString*) aliasId
    completionHandler: (void (^)(OAIAlias* output, NSError* error)) handler;


/// Get all email aliases
/// Get all email aliases in paginated form
///
/// @param page Optional page index in alias list pagination (optional) (default to @0)
/// @param size Optional page size in alias list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIPageAlias*
-(NSURLSessionTask*) getAliasesWithPage: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    completionHandler: (void (^)(OAIPageAlias* output, NSError* error)) handler;


/// Update an owned alias
/// 
///
/// @param aliasId aliasId
/// @param createOwnedAliasOptions createOwnedAliasOptions
/// 
///  code:201 message:"Created",
///  code:202 message:"Accepted",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) updateAliasWithAliasId: (NSString*) aliasId
    createOwnedAliasOptions: (OAICreateOwnedAliasOptions*) createOwnedAliasOptions
    completionHandler: (void (^)(NSError* error)) handler;



@end
