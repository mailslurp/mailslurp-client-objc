#import <Foundation/Foundation.h>
#import "OAICreateInboxRulesetOptions.h"
#import "OAIInboxRulesetDto.h"
#import "OAIInboxRulesetTestOptions.h"
#import "OAIInboxRulesetTestResult.h"
#import "OAIPageInboxRulesetDto.h"
#import "OAITestNewInboxRulesetOptions.h"
#import "OAIApi.h"

/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
*
* The version of the OpenAPI document: 6.5.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIInboxRulesetControllerApi: NSObject <OAIApi>

extern NSString* kOAIInboxRulesetControllerApiErrorDomain;
extern NSInteger kOAIInboxRulesetControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create an inbox ruleset
/// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
///
/// @param createInboxRulesetOptions createInboxRulesetOptions
/// @param inboxId Inbox id to attach ruleset to (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIInboxRulesetDto*
-(NSURLSessionTask*) createNewInboxRulesetWithCreateInboxRulesetOptions: (OAICreateInboxRulesetOptions*) createInboxRulesetOptions
    inboxId: (NSString*) inboxId
    completionHandler: (void (^)(OAIInboxRulesetDto* output, NSError* error)) handler;


/// Delete an inbox ruleset
/// Delete inbox ruleset
///
/// @param _id ID of inbox ruleset
/// 
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return void
-(NSURLSessionTask*) deleteInboxRulesetWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete inbox rulesets
/// Delete inbox rulesets. Accepts optional inboxId filter.
///
/// @param inboxId Optional inbox id to attach ruleset to (optional)
/// 
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return void
-(NSURLSessionTask*) deleteInboxRulesetsWithInboxId: (NSString*) inboxId
    completionHandler: (void (^)(NSError* error)) handler;


/// Get an inbox ruleset
/// Get inbox ruleset
///
/// @param _id ID of inbox ruleset
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIInboxRulesetDto*
-(NSURLSessionTask*) getInboxRulesetWithId: (NSString*) _id
    completionHandler: (void (^)(OAIInboxRulesetDto* output, NSError* error)) handler;


/// List inbox rulesets
/// List all rulesets attached to an inbox
///
/// @param inboxId Optional inbox id to get rulesets from (optional)
/// @param page Optional page index in inbox ruleset list pagination (optional) (default to @0)
/// @param searchFilter Optional search filter (optional)
/// @param size Optional page size in inbox ruleset list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIPageInboxRulesetDto*
-(NSURLSessionTask*) getInboxRulesetsWithInboxId: (NSString*) inboxId
    page: (NSNumber*) page
    searchFilter: (NSString*) searchFilter
    size: (NSNumber*) size
    sort: (NSString*) sort
    completionHandler: (void (^)(OAIPageInboxRulesetDto* output, NSError* error)) handler;


/// Test an inbox ruleset
/// Test an inbox ruleset
///
/// @param _id ID of inbox ruleset
/// @param inboxRulesetTestOptions inboxRulesetTestOptions
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIInboxRulesetTestResult*
-(NSURLSessionTask*) testInboxRulesetWithId: (NSString*) _id
    inboxRulesetTestOptions: (OAIInboxRulesetTestOptions*) inboxRulesetTestOptions
    completionHandler: (void (^)(OAIInboxRulesetTestResult* output, NSError* error)) handler;


/// Test inbox rulesets for inbox
/// Test inbox rulesets for inbox
///
/// @param inboxId ID of inbox
/// @param inboxRulesetTestOptions inboxRulesetTestOptions
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIInboxRulesetTestResult*
-(NSURLSessionTask*) testInboxRulesetsForInboxWithInboxId: (NSString*) inboxId
    inboxRulesetTestOptions: (OAIInboxRulesetTestOptions*) inboxRulesetTestOptions
    completionHandler: (void (^)(OAIInboxRulesetTestResult* output, NSError* error)) handler;


/// Test new inbox ruleset
/// Test new inbox ruleset
///
/// @param testNewInboxRulesetOptions testNewInboxRulesetOptions
/// 
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return OAIInboxRulesetTestResult*
-(NSURLSessionTask*) testNewInboxRulesetWithTestNewInboxRulesetOptions: (OAITestNewInboxRulesetOptions*) testNewInboxRulesetOptions
    completionHandler: (void (^)(OAIInboxRulesetTestResult* output, NSError* error)) handler;



@end
