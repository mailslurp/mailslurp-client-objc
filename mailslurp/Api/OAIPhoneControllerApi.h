#import <Foundation/Foundation.h>
#import "OAIConsentStatusDto.h"
#import "OAICreateEmergencyAddressOptions.h"
#import "OAICreatePhoneNumberOptions.h"
#import "OAIEmergencyAddress.h"
#import "OAIEmergencyAddressDto.h"
#import "OAIEmptyResponseDto.h"
#import "OAIPagePhoneMessageThreadItemProjection.h"
#import "OAIPagePhoneMessageThreadProjection.h"
#import "OAIPagePhoneNumberProjection.h"
#import "OAIPageSentSmsProjection.h"
#import "OAIPageSmsProjection.h"
#import "OAIPhoneNumberDto.h"
#import "OAIPhoneNumberValidationDto.h"
#import "OAIPhonePlanAvailability.h"
#import "OAIPhonePlanDto.h"
#import "OAISentSmsDto.h"
#import "OAISetPhoneFavouritedOptions.h"
#import "OAISmsSendOptions.h"
#import "OAITestPhoneNumberOptions.h"
#import "OAIUpdatePhoneNumberOptions.h"
#import "OAIValidatePhoneNumberOptions.h"
#import "OAIApi.h"

/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIPhoneControllerApi: NSObject <OAIApi>

extern NSString* kOAIPhoneControllerApiErrorDomain;
extern NSInteger kOAIPhoneControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create an emergency address
/// Add an emergency address to a phone number
///
/// @param createEmergencyAddressOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIEmergencyAddress*
-(NSURLSessionTask*) createEmergencyAddressWithCreateEmergencyAddressOptions: (OAICreateEmergencyAddressOptions*) createEmergencyAddressOptions
    completionHandler: (void (^)(OAIEmergencyAddress* output, NSError* error)) handler;


/// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
/// Create new phone number
///
/// @param createPhoneNumberOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIPhoneNumberDto*
-(NSURLSessionTask*) createPhoneNumberWithCreatePhoneNumberOptions: (OAICreatePhoneNumberOptions*) createPhoneNumberOptions
    completionHandler: (void (^)(OAIPhoneNumberDto* output, NSError* error)) handler;


/// Delete an emergency address
/// Delete an emergency address
///
/// @param addressId 
/// 
///  code:200 message:"OK"
///
/// @return OAIEmptyResponseDto*
-(NSURLSessionTask*) deleteEmergencyAddressWithAddressId: (NSString*) addressId
    completionHandler: (void (^)(OAIEmptyResponseDto* output, NSError* error)) handler;


/// Delete a phone number
/// Remove phone number from account
///
/// @param phoneNumberId 
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) deletePhoneNumberWithPhoneNumberId: (NSString*) phoneNumberId
    completionHandler: (void (^)(NSError* error)) handler;


/// Get the latest messages for all phones
/// List all message threads for all phones
///
/// @param page  (optional) (default to @0)
/// @param size  (optional) (default to @20)
/// 
///  code:200 message:"OK"
///
/// @return OAIPagePhoneMessageThreadProjection*
-(NSURLSessionTask*) getAllPhoneMessageThreadsWithPage: (NSNumber*) page
    size: (NSNumber*) size
    completionHandler: (void (^)(OAIPagePhoneMessageThreadProjection* output, NSError* error)) handler;


/// Get consent status
/// Get the status of phone usage consent
///
/// 
///  code:200 message:"OK"
///
/// @return OAIConsentStatusDto*
-(NSURLSessionTask*) getConsentStatusWithCompletionHandler: 
    (void (^)(OAIConsentStatusDto* output, NSError* error)) handler;


/// Get an emergency address
/// Fetch an emergency address by ID
///
/// @param addressId 
/// 
///  code:200 message:"OK"
///
/// @return OAIEmergencyAddress*
-(NSURLSessionTask*) getEmergencyAddressWithAddressId: (NSString*) addressId
    completionHandler: (void (^)(OAIEmergencyAddress* output, NSError* error)) handler;


/// Get emergency addresses
/// List emergency addresses
///
/// 
///  code:200 message:"OK"
///
/// @return NSArray<OAIEmergencyAddressDto>*
-(NSURLSessionTask*) getEmergencyAddressesWithCompletionHandler: 
    (void (^)(NSArray<OAIEmergencyAddressDto>* output, NSError* error)) handler;


/// Get messages in a phone thread
/// List message thread messages for a phone message thread
///
/// @param phoneNumberId 
/// @param otherNumber 
/// @param page  (optional) (default to @0)
/// @param size  (optional) (default to @20)
/// 
///  code:200 message:"OK"
///
/// @return OAIPagePhoneMessageThreadItemProjection*
-(NSURLSessionTask*) getPhoneMessageThreadItemsWithPhoneNumberId: (NSString*) phoneNumberId
    otherNumber: (NSString*) otherNumber
    page: (NSNumber*) page
    size: (NSNumber*) size
    completionHandler: (void (^)(OAIPagePhoneMessageThreadItemProjection* output, NSError* error)) handler;


/// Get the latest message preview for a thread
/// List message threads for a phone
///
/// @param phoneNumberId 
/// @param page  (optional) (default to @0)
/// @param size  (optional) (default to @20)
/// 
///  code:200 message:"OK"
///
/// @return OAIPagePhoneMessageThreadProjection*
-(NSURLSessionTask*) getPhoneMessageThreadsWithPhoneNumberId: (NSString*) phoneNumberId
    page: (NSNumber*) page
    size: (NSNumber*) size
    completionHandler: (void (^)(OAIPagePhoneMessageThreadProjection* output, NSError* error)) handler;


/// Get a phone number by ID
/// Get a phone number by ID
///
/// @param phoneNumberId 
/// 
///  code:200 message:"OK"
///
/// @return OAIPhoneNumberDto*
-(NSURLSessionTask*) getPhoneNumberWithPhoneNumberId: (NSString*) phoneNumberId
    completionHandler: (void (^)(OAIPhoneNumberDto* output, NSError* error)) handler;


/// Get a phone number by name
/// Get a phone number by name
///
/// 
///  code:200 message:"OK"
///
/// @return OAIPhoneNumberDto*
-(NSURLSessionTask*) getPhoneNumberByNameWithCompletionHandler: 
    (void (^)(OAIPhoneNumberDto* output, NSError* error)) handler;


/// Get a phone number by phone number
/// Get a phone number by phone number
///
/// 
///  code:200 message:"OK"
///
/// @return OAIPhoneNumberDto*
-(NSURLSessionTask*) getPhoneNumberByPhoneNumberWithCompletionHandler: 
    (void (^)(OAIPhoneNumberDto* output, NSError* error)) handler;


/// Get phone numbers
/// List phone numbers for account
///
/// @param phoneCountry Optional phone country (optional)
/// @param page Optional page index for list pagination (optional) (default to @0)
/// @param size Optional page size for list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param since Filter by created at after the given timestamp (optional)
/// @param before Filter by created at before the given timestamp (optional)
/// @param search Optional search filter (optional)
/// @param include Optional phoneIds to include in result (optional)
/// @param favourite Optionally filter results for favourites only (optional) (default to @(NO))
/// 
///  code:200 message:"OK"
///
/// @return OAIPagePhoneNumberProjection*
-(NSURLSessionTask*) getPhoneNumbersWithPhoneCountry: (NSString*) phoneCountry
    page: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    since: (NSDate*) since
    before: (NSDate*) before
    search: (NSString*) search
    include: (NSArray<NSString*>*) include
    favourite: (NSNumber*) favourite
    completionHandler: (void (^)(OAIPagePhoneNumberProjection* output, NSError* error)) handler;


/// Get phone plans
/// Get phone number plans
///
/// 
///  code:200 message:"OK"
///
/// @return NSArray<OAIPhonePlanDto>*
-(NSURLSessionTask*) getPhonePlansWithCompletionHandler: 
    (void (^)(NSArray<OAIPhonePlanDto>* output, NSError* error)) handler;


/// Get phone plans availability
/// 
///
/// 
///  code:200 message:"OK"
///
/// @return OAIPhonePlanAvailability*
-(NSURLSessionTask*) getPhonePlansAvailabilityWithCompletionHandler: 
    (void (^)(OAIPhonePlanAvailability* output, NSError* error)) handler;


/// List sent TXT messages for a phone number
/// Get sent SMS messages for a phone number
///
/// @param phoneNumberId 
/// @param page Optional page index in SMS list pagination (optional) (default to @0)
/// @param size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param since Optional filter SMSs received after given date time (optional)
/// @param before Optional filter SMSs received before given date time (optional)
/// @param search Optional search filter (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageSentSmsProjection*
-(NSURLSessionTask*) getSentSmsByPhoneNumberWithPhoneNumberId: (NSString*) phoneNumberId
    page: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    since: (NSDate*) since
    before: (NSDate*) before
    search: (NSString*) search
    completionHandler: (void (^)(OAIPageSentSmsProjection* output, NSError* error)) handler;


/// List SMS messages for a phone number
/// Get SMS messages for a phone number
///
/// @param phoneNumberId 
/// @param page Optional page index in SMS list pagination (optional) (default to @0)
/// @param size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param unreadOnly Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional) (default to @(NO))
/// @param since Optional filter SMSs received after given date time (optional)
/// @param before Optional filter SMSs received before given date time (optional)
/// @param search Optional search filter (optional)
/// @param favourite Optionally filter results for favourites only (optional) (default to @(NO))
/// 
///  code:200 message:"OK"
///
/// @return OAIPageSmsProjection*
-(NSURLSessionTask*) getSmsByPhoneNumberWithPhoneNumberId: (NSString*) phoneNumberId
    page: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    unreadOnly: (NSNumber*) unreadOnly
    since: (NSDate*) since
    before: (NSDate*) before
    search: (NSString*) search
    favourite: (NSNumber*) favourite
    completionHandler: (void (^)(OAIPageSmsProjection* output, NSError* error)) handler;


/// Send TXT message from a phone number
/// Send SMS from a phone number
///
/// @param phoneNumberId 
/// @param smsSendOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAISentSmsDto*
-(NSURLSessionTask*) sendSmsFromPhoneNumberWithPhoneNumberId: (NSString*) phoneNumberId
    smsSendOptions: (OAISmsSendOptions*) smsSendOptions
    completionHandler: (void (^)(OAISentSmsDto* output, NSError* error)) handler;


/// Set consent status
/// Give or revoke consent for phone usage
///
/// @param agree 
/// 
///  code:200 message:"OK"
///
/// @return OAIConsentStatusDto*
-(NSURLSessionTask*) setConsentStatusWithAgree: (NSNumber*) agree
    completionHandler: (void (^)(OAIConsentStatusDto* output, NSError* error)) handler;


/// Set phone favourited state
/// Set and return new favorite state for a phone
///
/// @param phoneNumberId ID of phone to set favourite state
/// @param setPhoneFavouritedOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIPhoneNumberDto*
-(NSURLSessionTask*) setPhoneFavouritedWithPhoneNumberId: (NSString*) phoneNumberId
    setPhoneFavouritedOptions: (OAISetPhoneFavouritedOptions*) setPhoneFavouritedOptions
    completionHandler: (void (^)(OAIPhoneNumberDto* output, NSError* error)) handler;


/// Test sending an SMS to a number
/// Test a phone number by sending an SMS to it
///
/// @param phoneNumberId 
/// @param testPhoneNumberOptions 
/// @param xTestId  (optional)
/// 
///  code:200 message:"OK"
///
/// @return void
-(NSURLSessionTask*) testPhoneNumberSendSmsWithPhoneNumberId: (NSString*) phoneNumberId
    testPhoneNumberOptions: (OAITestPhoneNumberOptions*) testPhoneNumberOptions
    xTestId: (NSString*) xTestId
    completionHandler: (void (^)(NSError* error)) handler;


/// Update a phone number
/// Set field for phone number
///
/// @param phoneNumberId ID of phone to set favourite state
/// @param updatePhoneNumberOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIPhoneNumberDto*
-(NSURLSessionTask*) updatePhoneNumberWithPhoneNumberId: (NSString*) phoneNumberId
    updatePhoneNumberOptions: (OAIUpdatePhoneNumberOptions*) updatePhoneNumberOptions
    completionHandler: (void (^)(OAIPhoneNumberDto* output, NSError* error)) handler;


/// Verify validity of a phone number
/// Validate a phone number
///
/// @param validatePhoneNumberOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIPhoneNumberValidationDto*
-(NSURLSessionTask*) validatePhoneNumberWithValidatePhoneNumberOptions: (OAIValidatePhoneNumberOptions*) validatePhoneNumberOptions
    completionHandler: (void (^)(OAIPhoneNumberValidationDto* output, NSError* error)) handler;



@end
