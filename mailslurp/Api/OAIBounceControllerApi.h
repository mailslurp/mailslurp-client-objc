#import <Foundation/Foundation.h>
#import "OAIBouncedEmailDto.h"
#import "OAIBouncedRecipientDto.h"
#import "OAIFilterBouncedRecipientsOptions.h"
#import "OAIFilterBouncedRecipientsResult.h"
#import "OAIPageBouncedEmail.h"
#import "OAIPageBouncedRecipients.h"
#import "OAIApi.h"

/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIBounceControllerApi: NSObject <OAIApi>

extern NSString* kOAIBounceControllerApiErrorDomain;
extern NSInteger kOAIBounceControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Filter a list of email recipients and remove those who have bounced
/// Prevent email sending errors by remove recipients who have resulted in past email bounces or complaints
///
/// @param filterBouncedRecipientsOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIFilterBouncedRecipientsResult*
-(NSURLSessionTask*) filterBouncedRecipientWithFilterBouncedRecipientsOptions: (OAIFilterBouncedRecipientsOptions*) filterBouncedRecipientsOptions
    completionHandler: (void (^)(OAIFilterBouncedRecipientsResult* output, NSError* error)) handler;


/// Get a bounced email.
/// Bounced emails are email you have sent that were rejected by a recipient
///
/// @param _id ID of the bounced email to fetch
/// 
///  code:200 message:"OK"
///
/// @return OAIBouncedEmailDto*
-(NSURLSessionTask*) getBouncedEmailWithId: (NSString*) _id
    completionHandler: (void (^)(OAIBouncedEmailDto* output, NSError* error)) handler;


/// Get paginated list of bounced emails.
/// Bounced emails are email you have sent that were rejected by a recipient
///
/// @param page Optional page index (optional) (default to @0)
/// @param size Optional page size  (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param since Filter by created at after the given timestamp (optional)
/// @param before Filter by created at before the given timestamp (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageBouncedEmail*
-(NSURLSessionTask*) getBouncedEmailsWithPage: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    since: (NSDate*) since
    before: (NSDate*) before
    completionHandler: (void (^)(OAIPageBouncedEmail* output, NSError* error)) handler;


/// Get a bounced email.
/// Bounced emails are email you have sent that were rejected by a recipient
///
/// @param _id ID of the bounced recipient
/// 
///  code:200 message:"OK"
///
/// @return OAIBouncedRecipientDto*
-(NSURLSessionTask*) getBouncedRecipientWithId: (NSString*) _id
    completionHandler: (void (^)(OAIBouncedRecipientDto* output, NSError* error)) handler;


/// Get paginated list of bounced recipients.
/// Bounced recipients are email addresses that you have sent emails to that did not accept the sent email. Once a recipient is bounced you cannot send emails to that address.
///
/// @param page Optional page index  (optional) (default to @0)
/// @param size Optional page size  (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param since Filter by created at after the given timestamp (optional)
/// @param before Filter by created at before the given timestamp (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageBouncedRecipients*
-(NSURLSessionTask*) getBouncedRecipientsWithPage: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    since: (NSDate*) since
    before: (NSDate*) before
    completionHandler: (void (^)(OAIPageBouncedRecipients* output, NSError* error)) handler;



@end
