#import <Foundation/Foundation.h>
#import "OAIConnectorDto.h"
#import "OAIConnectorEventDto.h"
#import "OAIConnectorImapConnectionDto.h"
#import "OAIConnectorImapConnectionTestResult.h"
#import "OAIConnectorProviderSettingsDto.h"
#import "OAIConnectorSmtpConnectionDto.h"
#import "OAIConnectorSmtpConnectionTestResult.h"
#import "OAIConnectorSyncRequestResult.h"
#import "OAIConnectorSyncSettingsDto.h"
#import "OAICreateConnectorImapConnectionOptions.h"
#import "OAICreateConnectorOptions.h"
#import "OAICreateConnectorSmtpConnectionOptions.h"
#import "OAICreateConnectorSyncSettingsOptions.h"
#import "OAICreateConnectorWithOptions.h"
#import "OAIOptionalConnectorDto.h"
#import "OAIOptionalConnectorImapConnectionDto.h"
#import "OAIOptionalConnectorSmtpConnectionDto.h"
#import "OAIOptionalConnectorSyncSettingsDto.h"
#import "OAIPageConnector.h"
#import "OAIPageConnectorEvents.h"
#import "OAISendEmailOptions.h"
#import "OAISentEmailDto.h"
#import "OAIApi.h"

/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIConnectorControllerApi: NSObject <OAIApi>

extern NSString* kOAIConnectorControllerApiErrorDomain;
extern NSInteger kOAIConnectorControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create an inbox connector
/// Sync emails between external mailboxes and MailSlurp inboxes
///
/// @param createConnectorOptions 
/// @param inboxId Optional inbox ID to associate with the connector (optional)
/// 
///  code:201 message:"Created"
///
/// @return OAIConnectorDto*
-(NSURLSessionTask*) createConnectorWithCreateConnectorOptions: (OAICreateConnectorOptions*) createConnectorOptions
    inboxId: (NSString*) inboxId
    completionHandler: (void (^)(OAIConnectorDto* output, NSError* error)) handler;


/// Create an inbox connector IMAP connection
/// Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
///
/// @param _id 
/// @param createConnectorImapConnectionOptions 
/// 
///  code:201 message:"Created"
///
/// @return OAIConnectorImapConnectionDto*
-(NSURLSessionTask*) createConnectorImapConnectionWithId: (NSString*) _id
    createConnectorImapConnectionOptions: (OAICreateConnectorImapConnectionOptions*) createConnectorImapConnectionOptions
    completionHandler: (void (^)(OAIConnectorImapConnectionDto* output, NSError* error)) handler;


/// Create an inbox connector SMTP connection
/// Allows sending via connector and email is routed to connected inbox and sent via SMTP
///
/// @param _id 
/// @param createConnectorSmtpConnectionOptions 
/// 
///  code:201 message:"Created"
///
/// @return OAIConnectorSmtpConnectionDto*
-(NSURLSessionTask*) createConnectorSmtpConnectionWithId: (NSString*) _id
    createConnectorSmtpConnectionOptions: (OAICreateConnectorSmtpConnectionOptions*) createConnectorSmtpConnectionOptions
    completionHandler: (void (^)(OAIConnectorSmtpConnectionDto* output, NSError* error)) handler;


/// Create an inbox connector sync settings
/// Configure automatic pull or emails from external inboxes using an interval or schedule
///
/// @param _id 
/// @param createConnectorSyncSettingsOptions 
/// 
///  code:201 message:"Created"
///
/// @return OAIConnectorSyncSettingsDto*
-(NSURLSessionTask*) createConnectorSyncSettingsWithId: (NSString*) _id
    createConnectorSyncSettingsOptions: (OAICreateConnectorSyncSettingsOptions*) createConnectorSyncSettingsOptions
    completionHandler: (void (^)(OAIConnectorSyncSettingsDto* output, NSError* error)) handler;


/// Create an inbox connector with options
/// Sync emails between external mailboxes and MailSlurp inboxes
///
/// @param createConnectorWithOptions 
/// @param inboxId Optional inbox ID to associate with the connector (optional)
/// 
///  code:201 message:"Created"
///
/// @return OAIConnectorDto*
-(NSURLSessionTask*) createConnectorWithOptionsWithCreateConnectorWithOptions: (OAICreateConnectorWithOptions*) createConnectorWithOptions
    inboxId: (NSString*) inboxId
    completionHandler: (void (^)(OAIConnectorDto* output, NSError* error)) handler;


/// Delete all inbox connectors
/// 
///
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) deleteAllConnectorWithCompletionHandler: 
    (void (^)(NSError* error)) handler;


/// Delete an inbox connector
/// 
///
/// @param _id 
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) deleteConnectorWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete an inbox connector IMAP connection
/// Delete IMAP connection for external inbox
///
/// @param _id 
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) deleteConnectorImapConnectionWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete an inbox connector SMTP connection
/// Delete SMTP connection for external inbox
///
/// @param _id 
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) deleteConnectorSmtpConnectionWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Create an inbox connector sync settings
/// Configure automatic pull or emails from external inboxes using an interval or schedule
///
/// @param _id 
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) deleteConnectorSyncSettingsWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Get all inbox connector events
/// 
///
/// @param _id Optional connector ID (optional)
/// @param page Optional page index in connector list pagination (optional) (default to @0)
/// @param size Optional page size in connector list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param since Filter by created at after the given timestamp (optional)
/// @param before Filter by created at before the given timestamp (optional)
/// @param eventType Filter by event type (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageConnectorEvents*
-(NSURLSessionTask*) getAllConnectorEventsWithId: (NSString*) _id
    page: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    since: (NSDate*) since
    before: (NSDate*) before
    eventType: (NSString*) eventType
    completionHandler: (void (^)(OAIPageConnectorEvents* output, NSError* error)) handler;


/// Get an inbox connector
/// 
///
/// @param _id 
/// 
///  code:200 message:"OK"
///
/// @return OAIConnectorDto*
-(NSURLSessionTask*) getConnectorWithId: (NSString*) _id
    completionHandler: (void (^)(OAIConnectorDto* output, NSError* error)) handler;


/// Get connector by email address
/// Find an inbox connector by email address
///
/// @param emailAddress Email address to search for connector by
/// 
///  code:200 message:"OK"
///
/// @return OAIOptionalConnectorDto*
-(NSURLSessionTask*) getConnectorByEmailAddressWithEmailAddress: (NSString*) emailAddress
    completionHandler: (void (^)(OAIOptionalConnectorDto* output, NSError* error)) handler;


/// Get connector by inbox ID
/// Find an inbox connector by inbox ID
///
/// @param inboxId Inbox ID to search for connector by
/// 
///  code:200 message:"OK"
///
/// @return OAIOptionalConnectorDto*
-(NSURLSessionTask*) getConnectorByInboxIdWithInboxId: (NSString*) inboxId
    completionHandler: (void (^)(OAIOptionalConnectorDto* output, NSError* error)) handler;


/// Get connector by name
/// Find an inbox connector by name
///
/// @param name Name to search for connector by
/// 
///  code:200 message:"OK"
///
/// @return OAIOptionalConnectorDto*
-(NSURLSessionTask*) getConnectorByNameWithName: (NSString*) name
    completionHandler: (void (^)(OAIOptionalConnectorDto* output, NSError* error)) handler;


/// Get an inbox connector event
/// 
///
/// @param _id 
/// 
///  code:200 message:"OK"
///
/// @return OAIConnectorEventDto*
-(NSURLSessionTask*) getConnectorEventWithId: (NSString*) _id
    completionHandler: (void (^)(OAIConnectorEventDto* output, NSError* error)) handler;


/// Get an inbox connector events
/// 
///
/// @param _id 
/// @param page Optional page index in connector list pagination (optional) (default to @0)
/// @param size Optional page size in connector list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param since Filter by created at after the given timestamp (optional)
/// @param before Filter by created at before the given timestamp (optional)
/// @param eventType Filter by event type (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageConnectorEvents*
-(NSURLSessionTask*) getConnectorEventsWithId: (NSString*) _id
    page: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    since: (NSDate*) since
    before: (NSDate*) before
    eventType: (NSString*) eventType
    completionHandler: (void (^)(OAIPageConnectorEvents* output, NSError* error)) handler;


/// Get an inbox connector IMAP connection
/// Get IMAP connection for external inbox
///
/// @param _id 
/// 
///  code:200 message:"OK"
///
/// @return OAIOptionalConnectorImapConnectionDto*
-(NSURLSessionTask*) getConnectorImapConnectionWithId: (NSString*) _id
    completionHandler: (void (^)(OAIOptionalConnectorImapConnectionDto* output, NSError* error)) handler;


/// Get SMTP and IMAP connection settings for common mail providers
/// Get common mail provider SMTP and IMAP connection settings
///
/// 
///  code:200 message:"OK"
///
/// @return OAIConnectorProviderSettingsDto*
-(NSURLSessionTask*) getConnectorProviderSettingsWithCompletionHandler: 
    (void (^)(OAIConnectorProviderSettingsDto* output, NSError* error)) handler;


/// Get an inbox connector SMTP connection
/// Get SMTP connection for external inbox
///
/// @param _id 
/// 
///  code:200 message:"OK"
///
/// @return OAIOptionalConnectorSmtpConnectionDto*
-(NSURLSessionTask*) getConnectorSmtpConnectionWithId: (NSString*) _id
    completionHandler: (void (^)(OAIOptionalConnectorSmtpConnectionDto* output, NSError* error)) handler;


/// Get an inbox connector sync settings
/// Get sync settings for connection with external inbox
///
/// @param _id 
/// 
///  code:200 message:"OK"
///
/// @return OAIOptionalConnectorSyncSettingsDto*
-(NSURLSessionTask*) getConnectorSyncSettingsWithId: (NSString*) _id
    completionHandler: (void (^)(OAIOptionalConnectorSyncSettingsDto* output, NSError* error)) handler;


/// Get inbox connectors
/// List inbox connectors that sync external emails to MailSlurp inboxes
///
/// @param page Optional page index in connector list pagination (optional) (default to @0)
/// @param size Optional page size in connector list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param since Filter by created at after the given timestamp (optional)
/// @param before Filter by created at before the given timestamp (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageConnector*
-(NSURLSessionTask*) getConnectorsWithPage: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    since: (NSDate*) since
    before: (NSDate*) before
    completionHandler: (void (^)(OAIPageConnector* output, NSError* error)) handler;


/// Send from an inbox connector
/// 
///
/// @param _id 
/// @param sendEmailOptions 
/// @param useFallback  (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAISentEmailDto*
-(NSURLSessionTask*) sendEmailFromConnectorWithId: (NSString*) _id
    sendEmailOptions: (OAISendEmailOptions*) sendEmailOptions
    useFallback: (NSNumber*) useFallback
    completionHandler: (void (^)(OAISentEmailDto* output, NSError* error)) handler;


/// Sync an inbox connector
/// 
///
/// @param _id 
/// @param since Date to request emails since (optional)
/// @param folder Which folder to sync emails with (optional)
/// @param logging Enable or disable logging for the sync operation (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIConnectorSyncRequestResult*
-(NSURLSessionTask*) syncConnectorWithId: (NSString*) _id
    since: (NSDate*) since
    folder: (NSString*) folder
    logging: (NSNumber*) logging
    completionHandler: (void (^)(OAIConnectorSyncRequestResult* output, NSError* error)) handler;


/// Test an inbox connector IMAP connection
/// Test the IMAP connection for a connector
///
/// @param _id 
/// @param createConnectorImapConnectionOptions  (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIConnectorImapConnectionTestResult*
-(NSURLSessionTask*) testConnectorImapConnectionWithId: (NSString*) _id
    createConnectorImapConnectionOptions: (OAICreateConnectorImapConnectionOptions*) createConnectorImapConnectionOptions
    completionHandler: (void (^)(OAIConnectorImapConnectionTestResult* output, NSError* error)) handler;


/// Test an inbox connector IMAP connection options
/// Test the IMAP connection options for a connector
///
/// @param createConnectorImapConnectionOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIConnectorImapConnectionTestResult*
-(NSURLSessionTask*) testConnectorImapConnectionOptionsWithCreateConnectorImapConnectionOptions: (OAICreateConnectorImapConnectionOptions*) createConnectorImapConnectionOptions
    completionHandler: (void (^)(OAIConnectorImapConnectionTestResult* output, NSError* error)) handler;


/// Test an inbox connector SMTP connection
/// Test the SMTP connection for a connector
///
/// @param _id 
/// @param createConnectorSmtpConnectionOptions  (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIConnectorSmtpConnectionTestResult*
-(NSURLSessionTask*) testConnectorSmtpConnectionWithId: (NSString*) _id
    createConnectorSmtpConnectionOptions: (OAICreateConnectorSmtpConnectionOptions*) createConnectorSmtpConnectionOptions
    completionHandler: (void (^)(OAIConnectorSmtpConnectionTestResult* output, NSError* error)) handler;


/// Test an inbox connector SMTP connection options
/// Test the SMTP connection options for a connector
///
/// @param createConnectorSmtpConnectionOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIConnectorSmtpConnectionTestResult*
-(NSURLSessionTask*) testConnectorSmtpConnectionOptionsWithCreateConnectorSmtpConnectionOptions: (OAICreateConnectorSmtpConnectionOptions*) createConnectorSmtpConnectionOptions
    completionHandler: (void (^)(OAIConnectorSmtpConnectionTestResult* output, NSError* error)) handler;


/// Update an inbox connector
/// 
///
/// @param _id 
/// @param createConnectorOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIConnectorDto*
-(NSURLSessionTask*) updateConnectorWithId: (NSString*) _id
    createConnectorOptions: (OAICreateConnectorOptions*) createConnectorOptions
    completionHandler: (void (^)(OAIConnectorDto* output, NSError* error)) handler;


/// Update an inbox connector IMAP connection
/// Update IMAP connection for external inbox
///
/// @param _id 
/// @param createConnectorImapConnectionOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIConnectorImapConnectionDto*
-(NSURLSessionTask*) updateConnectorImapConnectionWithId: (NSString*) _id
    createConnectorImapConnectionOptions: (OAICreateConnectorImapConnectionOptions*) createConnectorImapConnectionOptions
    completionHandler: (void (^)(OAIConnectorImapConnectionDto* output, NSError* error)) handler;


/// Update an inbox connector SMTP connection
/// Update SMTP connection for external inbox
///
/// @param _id 
/// @param createConnectorSmtpConnectionOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIConnectorSmtpConnectionDto*
-(NSURLSessionTask*) updateConnectorSmtpConnectionWithId: (NSString*) _id
    createConnectorSmtpConnectionOptions: (OAICreateConnectorSmtpConnectionOptions*) createConnectorSmtpConnectionOptions
    completionHandler: (void (^)(OAIConnectorSmtpConnectionDto* output, NSError* error)) handler;



@end
