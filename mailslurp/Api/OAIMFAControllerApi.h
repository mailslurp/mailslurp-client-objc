#import <Foundation/Foundation.h>
#import "OAICreateTotpDeviceBase32SecretKeyOptions.h"
#import "OAICreateTotpDeviceCustomOptions.h"
#import "OAICreateTotpDeviceOtpAuthUrlOptions.h"
#import "OAITotpDeviceCodeDto.h"
#import "OAITotpDeviceDto.h"
#import "OAITotpDeviceOptionalDto.h"
#import "OAIApi.h"

/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIMFAControllerApi: NSObject <OAIApi>

extern NSString* kOAIMFAControllerApiErrorDomain;
extern NSInteger kOAIMFAControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a TOTP device from an base32 secret key
/// Create a virtual TOTP device for a given secret key. This is usually present as an alternative login option when pairing OTP devices.
///
/// @param createTotpDeviceBase32SecretKeyOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAITotpDeviceDto*
-(NSURLSessionTask*) createTotpDeviceForBase32SecretKeyWithCreateTotpDeviceBase32SecretKeyOptions: (OAICreateTotpDeviceBase32SecretKeyOptions*) createTotpDeviceBase32SecretKeyOptions
    completionHandler: (void (^)(OAITotpDeviceDto* output, NSError* error)) handler;


/// Create a TOTP device from custom options
/// Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
///
/// @param createTotpDeviceCustomOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAITotpDeviceDto*
-(NSURLSessionTask*) createTotpDeviceForCustomWithCreateTotpDeviceCustomOptions: (OAICreateTotpDeviceCustomOptions*) createTotpDeviceCustomOptions
    completionHandler: (void (^)(OAITotpDeviceDto* output, NSError* error)) handler;


/// Create a TOTP device from an OTP Auth URL
/// Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret=ABC123&issuer=MyApp&period=30&digits=6&algorithm=SHA1. You can provider overrides in the options for each component of the URL.
///
/// @param createTotpDeviceOtpAuthUrlOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAITotpDeviceDto*
-(NSURLSessionTask*) createTotpDeviceForOtpAuthUrlWithCreateTotpDeviceOtpAuthUrlOptions: (OAICreateTotpDeviceOtpAuthUrlOptions*) createTotpDeviceOtpAuthUrlOptions
    completionHandler: (void (^)(OAITotpDeviceDto* output, NSError* error)) handler;


/// Get a TOTP device by ID
/// Get Time-Based One-Time Password (TOTP) device by its ID.
///
/// @param _id 
/// 
///  code:200 message:"OK"
///
/// @return OAITotpDeviceDto*
-(NSURLSessionTask*) getTotpDeviceWithId: (NSString*) _id
    completionHandler: (void (^)(OAITotpDeviceDto* output, NSError* error)) handler;


/// Get a TOTP device by username, issuer, or name. Returns empty if not found.
/// Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
///
/// @param name Optional name filter (optional)
/// @param issuer Optional issuer filter (optional)
/// @param username Optional username filter (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAITotpDeviceOptionalDto*
-(NSURLSessionTask*) getTotpDeviceByWithName: (NSString*) name
    issuer: (NSString*) issuer
    username: (NSString*) username
    completionHandler: (void (^)(OAITotpDeviceOptionalDto* output, NSError* error)) handler;


/// Get a TOTP device code by device ID
/// Get Time-Based One-Time Password for a device by its ID.
///
/// @param _id ID of the TOTP device to get the code for
/// @param at Optional time to get code for. If not provided, current time is used. (optional)
/// @param minSecondsUntilExpire Optional minimum time until code expires. Will hold thread open until period reached. (optional) (default to @5)
/// 
///  code:200 message:"OK"
///
/// @return OAITotpDeviceCodeDto*
-(NSURLSessionTask*) getTotpDeviceCodeWithId: (NSString*) _id
    at: (NSDate*) at
    minSecondsUntilExpire: (NSNumber*) minSecondsUntilExpire
    completionHandler: (void (^)(OAITotpDeviceCodeDto* output, NSError* error)) handler;



@end
