#import <Foundation/Foundation.h>
#import "OAICountDto.h"
#import "OAICreateInboxDto.h"
#import "OAICreateInboxRulesetOptions.h"
#import "OAIEmailPreview.h"
#import "OAIFlushExpiredInboxesResult.h"
#import "OAIInboxDto.h"
#import "OAIInboxExistsDto.h"
#import "OAIInboxRulesetDto.h"
#import "OAIPageEmailPreview.h"
#import "OAIPageInboxProjection.h"
#import "OAIPageInboxRulesetDto.h"
#import "OAIPageOrganizationInboxProjection.h"
#import "OAIPageSentEmailProjection.h"
#import "OAIPageTrackingPixelProjection.h"
#import "OAISendEmailOptions.h"
#import "OAISentEmailDto.h"
#import "OAISetInboxFavouritedOptions.h"
#import "OAIUpdateInboxOptions.h"
#import "OAIApi.h"

/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIInboxControllerApi: NSObject <OAIApi>

extern NSString* kOAIInboxControllerApiErrorDomain;
extern NSInteger kOAIInboxControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either `SMTP` or `HTTP` inboxes.
/// Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
///
/// @param aCustomEmailAddressToUseWithTheInboxDefaultsToNullWhenNullMailSlurpWillAssignARandomEmailAddressToTheInboxSuchAs123mailslurpComIfYouUseTheUseDomainPoolOptionWhenTheEmailAddressIsNullItWillGenerateAnEmailAddressWithAMoreVariedDomainEndingSuchAs123mailslurpInfoOr123mailslurpBizWhenACustomEmailAddressIsProvidedTheAddressIsSplitIntoADomainAndTheDomainIsQueriedAgainstYourUserIfYouHaveCreatedTheDomainInTheMailSlurpDashboardAndVerifiedItYouCanUseAnyEmailAddressThatEndsWithTheDomainNoteDomainTypesMustMatchTheInboxTypeSoSMTPInboxesWillOnlyWorkWithSMTPTypeDomainsAvoidSMTPInboxesIfYouNeedToSendEmailsAsTheyCanOnlyReceiveSendAnEmailToThisAddressAndTheInboxWillReceiveAndStoreItForYouToRetrieveTheEmailUseTheInboxAndEmailControllerEndpointsWithTheInboxID  (optional)
/// @param tagsThatInboxHasBeenTaggedWithTagsCanBeAddedToInboxesToGroupDifferentInboxesWithinAnAccountYouCanAlsoSearchForInboxesByTagInTheDashboardUI  (optional)
/// @param optionalNameOfTheInboxDisplayedInTheDashboardForEasierSearchAndUsedAsTheSenderNameWhenSendingEmails  (optional)
/// @param optionalDescriptionOfTheInboxForLabellingPurposesIsShownInTheDashboardAndCanBeUsedWith  (optional)
/// @param useTheMailSlurpDomainNamePoolWithThisInboxWhenCreatingTheEmailAddressDefaultsToNullIfEnabledTheInboxWillBeAnEmailAddressWithADomainRandomlyChosenFromAListOfTheMailSlurpDomainsThisIsUsefulWhenTheDefaultMailslurpComEmailAddressesUsedWithInboxesAreBlockedOrConsideredSpamByAProviderOrReceivingServiceWhenDomainPoolIsEnabledAnEmailAddressWillBeGeneratedEndingInMailslurpWorldinfoxyzThisMeansATLDIsRandomlySelectingFromAListOfBizInfoXyzEtcToAddVarianceToTheGeneratedEmailAddressesWhenNullOrFalseMailSlurpUsesTheDefaultBehaviorOfMailslurpComOrCustomEmailAddressProvidedByTheEmailAddressFieldNoteThisFeatureIsOnlyAvailableForHTTPInboxTypes  (optional)
/// @param isTheInboxAFavoriteMarkingAnInboxAsAFavoriteIsTypicallyDoneInTheDashboardForQuickAccessOrFiltering  (optional)
/// @param optionalInboxExpirationDateIfNullThenThisInboxIsPermanentAndTheEmailsInItWontBeDeletedIfAnExpirationDateIsProvidedOrIsRequiredByYourPlanTheInboxWillBeClosedWhenTheExpirationTimeIsReachedExpiredInboxesStillContainTheirEmailsButCanNoLongerSendOrReceiveEmailsAnExpiredInboxRecordIsCreatedWhenAnInboxAndTheEmailAddressAndInboxIDAreRecordedTheExpiresAtPropertyIsATimestampStringInISODateTimeFormatYyyyMMDdTHHmmssSSSXXX  (optional)
/// @param numberOfMillisecondsThatInboxShouldExistFor  (optional)
/// @param dEPRECATEDTeamAccessIsAlwaysTrueGrantTeamAccessToThisInboxAndTheEmailsThatBelongToItForTeamMembersOfYourOrganization  (optional)
/// @param hTTPDefaultOrSMTPInboxTypeHTTPInboxesAreDefaultAndBestSolutionForMostCasesSMTPInboxesAreMoreReliableForPublicInboundEmailConsumptionButDoNotSupportSendingEmailsWhenUsingCustomDomainsTheDomainTypeMustMatchTheInboxTypeHTTPInboxesAreProcessedByAWSSESWhileSMTPInboxesUseACustomMailServerRunningAtMxMailslurpCom  (optional)
/// 
///  code:201 message:"Created"
///
/// @return OAIInboxDto*
-(NSURLSessionTask*) createInboxWithACustomEmailAddressToUseWithTheInboxDefaultsToNullWhenNullMailSlurpWillAssignARandomEmailAddressToTheInboxSuchAs123mailslurpComIfYouUseTheUseDomainPoolOptionWhenTheEmailAddressIsNullItWillGenerateAnEmailAddressWithAMoreVariedDomainEndingSuchAs123mailslurpInfoOr123mailslurpBizWhenACustomEmailAddressIsProvidedTheAddressIsSplitIntoADomainAndTheDomainIsQueriedAgainstYourUserIfYouHaveCreatedTheDomainInTheMailSlurpDashboardAndVerifiedItYouCanUseAnyEmailAddressThatEndsWithTheDomainNoteDomainTypesMustMatchTheInboxTypeSoSMTPInboxesWillOnlyWorkWithSMTPTypeDomainsAvoidSMTPInboxesIfYouNeedToSendEmailsAsTheyCanOnlyReceiveSendAnEmailToThisAddressAndTheInboxWillReceiveAndStoreItForYouToRetrieveTheEmailUseTheInboxAndEmailControllerEndpointsWithTheInboxID: (NSString*) aCustomEmailAddressToUseWithTheInboxDefaultsToNullWhenNullMailSlurpWillAssignARandomEmailAddressToTheInboxSuchAs123mailslurpComIfYouUseTheUseDomainPoolOptionWhenTheEmailAddressIsNullItWillGenerateAnEmailAddressWithAMoreVariedDomainEndingSuchAs123mailslurpInfoOr123mailslurpBizWhenACustomEmailAddressIsProvidedTheAddressIsSplitIntoADomainAndTheDomainIsQueriedAgainstYourUserIfYouHaveCreatedTheDomainInTheMailSlurpDashboardAndVerifiedItYouCanUseAnyEmailAddressThatEndsWithTheDomainNoteDomainTypesMustMatchTheInboxTypeSoSMTPInboxesWillOnlyWorkWithSMTPTypeDomainsAvoidSMTPInboxesIfYouNeedToSendEmailsAsTheyCanOnlyReceiveSendAnEmailToThisAddressAndTheInboxWillReceiveAndStoreItForYouToRetrieveTheEmailUseTheInboxAndEmailControllerEndpointsWithTheInboxID
    tagsThatInboxHasBeenTaggedWithTagsCanBeAddedToInboxesToGroupDifferentInboxesWithinAnAccountYouCanAlsoSearchForInboxesByTagInTheDashboardUI: (NSArray<NSString*>*) tagsThatInboxHasBeenTaggedWithTagsCanBeAddedToInboxesToGroupDifferentInboxesWithinAnAccountYouCanAlsoSearchForInboxesByTagInTheDashboardUI
    optionalNameOfTheInboxDisplayedInTheDashboardForEasierSearchAndUsedAsTheSenderNameWhenSendingEmails: (NSString*) optionalNameOfTheInboxDisplayedInTheDashboardForEasierSearchAndUsedAsTheSenderNameWhenSendingEmails
    optionalDescriptionOfTheInboxForLabellingPurposesIsShownInTheDashboardAndCanBeUsedWith: (NSString*) optionalDescriptionOfTheInboxForLabellingPurposesIsShownInTheDashboardAndCanBeUsedWith
    useTheMailSlurpDomainNamePoolWithThisInboxWhenCreatingTheEmailAddressDefaultsToNullIfEnabledTheInboxWillBeAnEmailAddressWithADomainRandomlyChosenFromAListOfTheMailSlurpDomainsThisIsUsefulWhenTheDefaultMailslurpComEmailAddressesUsedWithInboxesAreBlockedOrConsideredSpamByAProviderOrReceivingServiceWhenDomainPoolIsEnabledAnEmailAddressWillBeGeneratedEndingInMailslurpWorldinfoxyzThisMeansATLDIsRandomlySelectingFromAListOfBizInfoXyzEtcToAddVarianceToTheGeneratedEmailAddressesWhenNullOrFalseMailSlurpUsesTheDefaultBehaviorOfMailslurpComOrCustomEmailAddressProvidedByTheEmailAddressFieldNoteThisFeatureIsOnlyAvailableForHTTPInboxTypes: (NSNumber*) useTheMailSlurpDomainNamePoolWithThisInboxWhenCreatingTheEmailAddressDefaultsToNullIfEnabledTheInboxWillBeAnEmailAddressWithADomainRandomlyChosenFromAListOfTheMailSlurpDomainsThisIsUsefulWhenTheDefaultMailslurpComEmailAddressesUsedWithInboxesAreBlockedOrConsideredSpamByAProviderOrReceivingServiceWhenDomainPoolIsEnabledAnEmailAddressWillBeGeneratedEndingInMailslurpWorldinfoxyzThisMeansATLDIsRandomlySelectingFromAListOfBizInfoXyzEtcToAddVarianceToTheGeneratedEmailAddressesWhenNullOrFalseMailSlurpUsesTheDefaultBehaviorOfMailslurpComOrCustomEmailAddressProvidedByTheEmailAddressFieldNoteThisFeatureIsOnlyAvailableForHTTPInboxTypes
    isTheInboxAFavoriteMarkingAnInboxAsAFavoriteIsTypicallyDoneInTheDashboardForQuickAccessOrFiltering: (NSNumber*) isTheInboxAFavoriteMarkingAnInboxAsAFavoriteIsTypicallyDoneInTheDashboardForQuickAccessOrFiltering
    optionalInboxExpirationDateIfNullThenThisInboxIsPermanentAndTheEmailsInItWontBeDeletedIfAnExpirationDateIsProvidedOrIsRequiredByYourPlanTheInboxWillBeClosedWhenTheExpirationTimeIsReachedExpiredInboxesStillContainTheirEmailsButCanNoLongerSendOrReceiveEmailsAnExpiredInboxRecordIsCreatedWhenAnInboxAndTheEmailAddressAndInboxIDAreRecordedTheExpiresAtPropertyIsATimestampStringInISODateTimeFormatYyyyMMDdTHHmmssSSSXXX: (NSDate*) optionalInboxExpirationDateIfNullThenThisInboxIsPermanentAndTheEmailsInItWontBeDeletedIfAnExpirationDateIsProvidedOrIsRequiredByYourPlanTheInboxWillBeClosedWhenTheExpirationTimeIsReachedExpiredInboxesStillContainTheirEmailsButCanNoLongerSendOrReceiveEmailsAnExpiredInboxRecordIsCreatedWhenAnInboxAndTheEmailAddressAndInboxIDAreRecordedTheExpiresAtPropertyIsATimestampStringInISODateTimeFormatYyyyMMDdTHHmmssSSSXXX
    numberOfMillisecondsThatInboxShouldExistFor: (NSNumber*) numberOfMillisecondsThatInboxShouldExistFor
    dEPRECATEDTeamAccessIsAlwaysTrueGrantTeamAccessToThisInboxAndTheEmailsThatBelongToItForTeamMembersOfYourOrganization: (NSNumber*) dEPRECATEDTeamAccessIsAlwaysTrueGrantTeamAccessToThisInboxAndTheEmailsThatBelongToItForTeamMembersOfYourOrganization
    hTTPDefaultOrSMTPInboxTypeHTTPInboxesAreDefaultAndBestSolutionForMostCasesSMTPInboxesAreMoreReliableForPublicInboundEmailConsumptionButDoNotSupportSendingEmailsWhenUsingCustomDomainsTheDomainTypeMustMatchTheInboxTypeHTTPInboxesAreProcessedByAWSSESWhileSMTPInboxesUseACustomMailServerRunningAtMxMailslurpCom: (NSString*) hTTPDefaultOrSMTPInboxTypeHTTPInboxesAreDefaultAndBestSolutionForMostCasesSMTPInboxesAreMoreReliableForPublicInboundEmailConsumptionButDoNotSupportSendingEmailsWhenUsingCustomDomainsTheDomainTypeMustMatchTheInboxTypeHTTPInboxesAreProcessedByAWSSESWhileSMTPInboxesUseACustomMailServerRunningAtMxMailslurpCom
    completionHandler: (void (^)(OAIInboxDto* output, NSError* error)) handler;


/// Create an inbox ruleset
/// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
///
/// @param inboxId 
/// @param createInboxRulesetOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIInboxRulesetDto*
-(NSURLSessionTask*) createInboxRulesetWithInboxId: (NSString*) inboxId
    createInboxRulesetOptions: (OAICreateInboxRulesetOptions*) createInboxRulesetOptions
    completionHandler: (void (^)(OAIInboxRulesetDto* output, NSError* error)) handler;


/// Create an inbox with default options. Uses MailSlurp domain pool address and is private.
/// 
///
/// 
///  code:201 message:"Created"
///
/// @return OAIInboxDto*
-(NSURLSessionTask*) createInboxWithDefaultsWithCompletionHandler: 
    (void (^)(OAIInboxDto* output, NSError* error)) handler;


/// Create an inbox with options. Extended options for inbox creation.
/// Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
///
/// @param createInboxDto 
/// 
///  code:201 message:"Created"
///
/// @return OAIInboxDto*
-(NSURLSessionTask*) createInboxWithOptionsWithCreateInboxDto: (OAICreateInboxDto*) createInboxDto
    completionHandler: (void (^)(OAIInboxDto* output, NSError* error)) handler;


/// Delete all inboxes
/// Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
///
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) deleteAllInboxesWithCompletionHandler: 
    (void (^)(NSError* error)) handler;


/// Delete inbox
/// Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
///
/// @param inboxId 
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) deleteInboxWithInboxId: (NSString*) inboxId
    completionHandler: (void (^)(NSError* error)) handler;


/// Does inbox exist
/// Check if inboxes exist by email address. Useful if you are sending emails to mailslurp addresses
///
/// @param emailAddress Email address
/// 
///  code:200 message:"OK"
///
/// @return OAIInboxExistsDto*
-(NSURLSessionTask*) doesInboxExistWithEmailAddress: (NSString*) emailAddress
    completionHandler: (void (^)(OAIInboxExistsDto* output, NSError* error)) handler;


/// Remove expired inboxes
/// Remove any expired inboxes for your account (instead of waiting for scheduled removal on server)
///
/// @param before Optional expired at before flag to flush expired inboxes that have expired before the given time (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIFlushExpiredInboxesResult*
-(NSURLSessionTask*) flushExpiredWithBefore: (NSDate*) before
    completionHandler: (void (^)(OAIFlushExpiredInboxesResult* output, NSError* error)) handler;


/// List All Inboxes Paginated
/// List inboxes in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
///
/// @param page Optional page index in list pagination (optional) (default to @0)
/// @param size Optional page size in list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param favourite Optionally filter results for favourites only (optional) (default to @(NO))
/// @param search Optionally filter by search words partial matching ID, tags, name, and email address (optional)
/// @param tag Optionally filter by tags. Will return inboxes that include given tags (optional)
/// @param dEPRECATEDOptionallyFilterByTeamAccess  (optional)
/// @param since Optional filter by created after given date time (optional)
/// @param before Optional filter by created before given date time (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageInboxProjection*
-(NSURLSessionTask*) getAllInboxesWithPage: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    favourite: (NSNumber*) favourite
    search: (NSString*) search
    tag: (NSString*) tag
    dEPRECATEDOptionallyFilterByTeamAccess: (NSNumber*) dEPRECATEDOptionallyFilterByTeamAccess
    since: (NSDate*) since
    before: (NSDate*) before
    completionHandler: (void (^)(OAIPageInboxProjection* output, NSError* error)) handler;


/// Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
/// List emails that an inbox has received. Only emails that are sent to the inbox's email address will appear in the inbox. It may take several seconds for any email you send to an inbox's email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the `minCount` parameter. The server will retry the inbox database until the `minCount` is satisfied or the `retryTimeout` is reached
///
/// @param idOfInboxThatEmailsBelongsTo 
/// @param aliasForLimitAssessedFirstBeforeAssessingAnyPassedLimit  (optional)
/// @param limit Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)
/// @param sortTheResultsByReceivedDateAndDirectionASCOrDESC  (optional)
/// @param retryTimeout Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)
/// @param delayTimeout  (optional)
/// @param minCount Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)
/// @param unreadOnly  (optional)
/// @param excludeEmailsReceivedAfterThisISO8601DateTime  (optional)
/// @param excludeEmailsReceivedBeforeThisISO8601DateTime  (optional)
/// 
///  code:200 message:"OK"
///
/// @return NSArray<OAIEmailPreview>*
-(NSURLSessionTask*) getEmailsWithIdOfInboxThatEmailsBelongsTo: (NSString*) idOfInboxThatEmailsBelongsTo
    aliasForLimitAssessedFirstBeforeAssessingAnyPassedLimit: (NSNumber*) aliasForLimitAssessedFirstBeforeAssessingAnyPassedLimit
    limit: (NSNumber*) limit
    sortTheResultsByReceivedDateAndDirectionASCOrDESC: (NSString*) sortTheResultsByReceivedDateAndDirectionASCOrDESC
    retryTimeout: (NSNumber*) retryTimeout
    delayTimeout: (NSNumber*) delayTimeout
    minCount: (NSNumber*) minCount
    unreadOnly: (NSNumber*) unreadOnly
    excludeEmailsReceivedAfterThisISO8601DateTime: (NSDate*) excludeEmailsReceivedAfterThisISO8601DateTime
    excludeEmailsReceivedBeforeThisISO8601DateTime: (NSDate*) excludeEmailsReceivedBeforeThisISO8601DateTime
    completionHandler: (void (^)(NSArray<OAIEmailPreview>* output, NSError* error)) handler;


/// Get Inbox. Returns properties of an inbox.
/// Returns an inbox's properties, including its email address and ID.
///
/// @param inboxId 
/// 
///  code:200 message:"OK"
///
/// @return OAIInboxDto*
-(NSURLSessionTask*) getInboxWithInboxId: (NSString*) inboxId
    completionHandler: (void (^)(OAIInboxDto* output, NSError* error)) handler;


/// Get total inbox count
/// 
///
/// 
///  code:200 message:"OK"
///
/// @return OAICountDto*
-(NSURLSessionTask*) getInboxCountWithCompletionHandler: 
    (void (^)(OAICountDto* output, NSError* error)) handler;


/// Get email count in inbox
/// 
///
/// @param idOfInboxThatEmailsBelongsTo 
/// 
///  code:200 message:"OK"
///
/// @return OAICountDto*
-(NSURLSessionTask*) getInboxEmailCountWithIdOfInboxThatEmailsBelongsTo: (NSString*) idOfInboxThatEmailsBelongsTo
    completionHandler: (void (^)(OAICountDto* output, NSError* error)) handler;


/// Get inbox emails paginated
/// Get a paginated list of emails in an inbox. Does not hold connections open.
///
/// @param idOfInboxThatEmailsBelongsTo 
/// @param page Optional page index in inbox emails list pagination (optional) (default to @0)
/// @param size Optional page size in inbox emails list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param since Optional filter by received after given date time (optional)
/// @param before Optional filter by received before given date time (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageEmailPreview*
-(NSURLSessionTask*) getInboxEmailsPaginatedWithIdOfInboxThatEmailsBelongsTo: (NSString*) idOfInboxThatEmailsBelongsTo
    page: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    since: (NSDate*) since
    before: (NSDate*) before
    completionHandler: (void (^)(OAIPageEmailPreview* output, NSError* error)) handler;


/// Get Inbox Sent Emails
/// Returns an inbox's sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
///
/// @param inboxId 
/// @param page Optional page index in inbox sent email list pagination (optional) (default to @0)
/// @param optionalPageSizeInInboxSentEmailListPagination  (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param searchFilter Optional sent email search (optional)
/// @param since Optional filter by sent after given date time (optional)
/// @param before Optional filter by sent before given date time (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageSentEmailProjection*
-(NSURLSessionTask*) getInboxSentEmailsWithInboxId: (NSString*) inboxId
    page: (NSNumber*) page
    optionalPageSizeInInboxSentEmailListPagination: (NSNumber*) optionalPageSizeInInboxSentEmailListPagination
    sort: (NSString*) sort
    searchFilter: (NSString*) searchFilter
    since: (NSDate*) since
    before: (NSDate*) before
    completionHandler: (void (^)(OAIPageSentEmailProjection* output, NSError* error)) handler;


/// Get inbox tags
/// Get all inbox tags
///
/// 
///  code:200 message:"OK"
///
/// @return NSArray<NSString*>*
-(NSURLSessionTask*) getInboxTagsWithCompletionHandler: 
    (void (^)(NSArray<NSString*>* output, NSError* error)) handler;


/// List Inboxes and email addresses
/// List the inboxes you have created. Note use of the more advanced `getAllEmails` is recommended and allows paginated access using a limit and sort parameter.
///
/// @param size Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional) (default to @100)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param since Optional filter by created after given date time (optional)
/// @param before Optional filter by created before given date time (optional)
/// 
///  code:200 message:"OK"
///
/// @return NSArray<OAIInboxDto>*
-(NSURLSessionTask*) getInboxesWithSize: (NSNumber*) size
    sort: (NSString*) sort
    since: (NSDate*) since
    before: (NSDate*) before
    completionHandler: (void (^)(NSArray<OAIInboxDto>* output, NSError* error)) handler;


/// List Organization Inboxes Paginated
/// List organization inboxes in paginated form. These are inboxes created with `allowTeamAccess` flag enabled. Organization inboxes are `readOnly` for non-admin users. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
///
/// @param page Optional page index in list pagination (optional) (default to @0)
/// @param size Optional page size in list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param searchFilter Optional search filter (optional)
/// @param since Optional filter by created after given date time (optional)
/// @param before Optional filter by created before given date time (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageOrganizationInboxProjection*
-(NSURLSessionTask*) getOrganizationInboxesWithPage: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    searchFilter: (NSString*) searchFilter
    since: (NSDate*) since
    before: (NSDate*) before
    completionHandler: (void (^)(OAIPageOrganizationInboxProjection* output, NSError* error)) handler;


/// List inbox rulesets
/// List all rulesets attached to an inbox
///
/// @param inboxId 
/// @param page Optional page index in inbox ruleset list pagination (optional) (default to @0)
/// @param size Optional page size in inbox ruleset list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param searchFilter Optional search filter (optional)
/// @param since Optional filter by created after given date time (optional)
/// @param before Optional filter by created before given date time (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageInboxRulesetDto*
-(NSURLSessionTask*) listInboxRulesetsWithInboxId: (NSString*) inboxId
    page: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    searchFilter: (NSString*) searchFilter
    since: (NSDate*) since
    before: (NSDate*) before
    completionHandler: (void (^)(OAIPageInboxRulesetDto* output, NSError* error)) handler;


/// List inbox tracking pixels
/// List all tracking pixels sent from an inbox
///
/// @param inboxId 
/// @param page Optional page index in inbox tracking pixel list pagination (optional) (default to @0)
/// @param optionalPageSizeInInboxTrackingPixelListPagination  (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param searchFilter Optional search filter (optional)
/// @param since Optional filter by created after given date time (optional)
/// @param before Optional filter by created before given date time (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageTrackingPixelProjection*
-(NSURLSessionTask*) listInboxTrackingPixelsWithInboxId: (NSString*) inboxId
    page: (NSNumber*) page
    optionalPageSizeInInboxTrackingPixelListPagination: (NSNumber*) optionalPageSizeInInboxTrackingPixelListPagination
    sort: (NSString*) sort
    searchFilter: (NSString*) searchFilter
    since: (NSDate*) since
    before: (NSDate*) before
    completionHandler: (void (^)(OAIPageTrackingPixelProjection* output, NSError* error)) handler;


/// Send Email
/// Send an email from an inbox's email address.  The request body should contain the `SendEmailOptions` that include recipients, attachments, body etc. See `SendEmailOptions` for all available properties. Note the `inboxId` refers to the inbox's id not the inbox's email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method `sendEmailAndConfirm`.
///
/// @param iDOfTheInboxYouWantToSendTheEmailFrom 
/// @param sendEmailOptions 
/// 
///  code:201 message:"Created"
///
/// @return void
-(NSURLSessionTask*) sendEmailWithIDOfTheInboxYouWantToSendTheEmailFrom: (NSString*) iDOfTheInboxYouWantToSendTheEmailFrom
    sendEmailOptions: (OAISendEmailOptions*) sendEmailOptions
    completionHandler: (void (^)(NSError* error)) handler;


/// Send email and return sent confirmation
/// Sister method for standard `sendEmail` method with the benefit of returning a `SentEmail` entity confirming the successful sending of the email with a link to the sent object created for it.
///
/// @param iDOfTheInboxYouWantToSendTheEmailFrom 
/// @param sendEmailOptions 
/// 
///  code:201 message:"Created"
///
/// @return OAISentEmailDto*
-(NSURLSessionTask*) sendEmailAndConfirmWithIDOfTheInboxYouWantToSendTheEmailFrom: (NSString*) iDOfTheInboxYouWantToSendTheEmailFrom
    sendEmailOptions: (OAISendEmailOptions*) sendEmailOptions
    completionHandler: (void (^)(OAISentEmailDto* output, NSError* error)) handler;


/// Send a test email to inbox
/// Send an inbox a test email to test email receiving is working
///
/// @param inboxId 
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) sendTestEmailWithInboxId: (NSString*) inboxId
    completionHandler: (void (^)(NSError* error)) handler;


/// Set inbox favourited state
/// Set and return new favourite state for an inbox
///
/// @param inboxId 
/// @param setInboxFavouritedOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIInboxDto*
-(NSURLSessionTask*) setInboxFavouritedWithInboxId: (NSString*) inboxId
    setInboxFavouritedOptions: (OAISetInboxFavouritedOptions*) setInboxFavouritedOptions
    completionHandler: (void (^)(OAIInboxDto* output, NSError* error)) handler;


/// Update Inbox. Change name and description. Email address is not editable.
/// Update editable fields on an inbox
///
/// @param inboxId 
/// @param updateInboxOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIInboxDto*
-(NSURLSessionTask*) updateInboxWithInboxId: (NSString*) inboxId
    updateInboxOptions: (OAIUpdateInboxOptions*) updateInboxOptions
    completionHandler: (void (^)(OAIInboxDto* output, NSError* error)) handler;



@end
