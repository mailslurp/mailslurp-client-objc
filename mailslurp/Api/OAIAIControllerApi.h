#import <Foundation/Foundation.h>
#import "OAIAITransformCreateOptions.h"
#import "OAIAITransformDto.h"
#import "OAIAITransformMappingDto.h"
#import "OAIAITransformResultDto.h"
#import "OAIConditionalStructuredContentResult.h"
#import "OAICreateAITransformerMappingOptions.h"
#import "OAIGenerateStructuredContentAttachmentOptions.h"
#import "OAIGenerateStructuredContentEmailOptions.h"
#import "OAIGenerateStructuredContentSmsOptions.h"
#import "OAIInvokeTransformerOptions.h"
#import "OAIPageAITransformMappingProjection.h"
#import "OAIPageAITransformProjection.h"
#import "OAIPageAITransformResultProjection.h"
#import "OAIStructuredContentResultDto.h"
#import "OAIStructuredOutputSchema.h"
#import "OAIStructuredOutputSchemaValidation.h"
#import "OAIApi.h"

/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIAIControllerApi: NSObject <OAIApi>

extern NSString* kOAIAIControllerApiErrorDomain;
extern NSInteger kOAIAIControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a transformer for reuse in automations
/// Save an AI transform instructions and schema for use with webhooks and automations
///
/// @param aITransformCreateOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIAITransformDto*
-(NSURLSessionTask*) createTransformerWithAITransformCreateOptions: (OAIAITransformCreateOptions*) aITransformCreateOptions
    completionHandler: (void (^)(OAIAITransformDto* output, NSError* error)) handler;


/// Create transformer mapping
/// Create AI transformer mappings to other entities
///
/// @param createAITransformerMappingOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIAITransformMappingDto*
-(NSURLSessionTask*) createTransformerMappingsWithCreateAITransformerMappingOptions: (OAICreateAITransformerMappingOptions*) createAITransformerMappingOptions
    completionHandler: (void (^)(OAIAITransformMappingDto* output, NSError* error)) handler;


/// Delete all transformer mapping
/// Delete all AI transformer mappings
///
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) deleteAllTransformerMappingsWithCompletionHandler: 
    (void (^)(NSError* error)) handler;


/// Delete a transformer
/// Delete an AI transformer and schemas by ID
///
/// @param _id 
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) deleteTransformerWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete transformer mapping
/// Delete an AI transformer mapping
///
/// @param _id ID of transform mapping
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) deleteTransformerMappingWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete all transformers
/// Delete all AI transformers and schemas
///
/// 
///  code:204 message:"No Content"
///
/// @return void
-(NSURLSessionTask*) deleteTransformersWithCompletionHandler: 
    (void (^)(NSError* error)) handler;


/// Generate structured content for an attachment
/// Use output schemas to extract data from an attachment using AI
///
/// @param generateStructuredContentAttachmentOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIStructuredContentResultDto*
-(NSURLSessionTask*) generateStructuredContentFromAttachmentWithGenerateStructuredContentAttachmentOptions: (OAIGenerateStructuredContentAttachmentOptions*) generateStructuredContentAttachmentOptions
    completionHandler: (void (^)(OAIStructuredContentResultDto* output, NSError* error)) handler;


/// Generate structured content for an email
/// Use output schemas to extract data from an email using AI
///
/// @param generateStructuredContentEmailOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIStructuredContentResultDto*
-(NSURLSessionTask*) generateStructuredContentFromEmailWithGenerateStructuredContentEmailOptions: (OAIGenerateStructuredContentEmailOptions*) generateStructuredContentEmailOptions
    completionHandler: (void (^)(OAIStructuredContentResultDto* output, NSError* error)) handler;


/// Generate structured content for a TXT message
/// Use output schemas to extract data from an SMS using AI
///
/// @param generateStructuredContentSmsOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIStructuredContentResultDto*
-(NSURLSessionTask*) generateStructuredContentFromSmsWithGenerateStructuredContentSmsOptions: (OAIGenerateStructuredContentSmsOptions*) generateStructuredContentSmsOptions
    completionHandler: (void (^)(OAIStructuredContentResultDto* output, NSError* error)) handler;


/// Get a transformer
/// Get AI transformer and schemas by ID
///
/// @param _id 
/// 
///  code:200 message:"OK"
///
/// @return OAIAITransformDto*
-(NSURLSessionTask*) getTransformerWithId: (NSString*) _id
    completionHandler: (void (^)(OAIAITransformDto* output, NSError* error)) handler;


/// Get transformer mapping
/// Get an AI transformer mapping
///
/// @param _id ID of transform mapping
/// 
///  code:200 message:"OK"
///
/// @return OAIAITransformMappingDto*
-(NSURLSessionTask*) getTransformerMappingWithId: (NSString*) _id
    completionHandler: (void (^)(OAIAITransformMappingDto* output, NSError* error)) handler;


/// Get transformer mappings
/// Get AI transformer mappings to other entities
///
/// @param aiTransformId  (optional)
/// @param entityId  (optional)
/// @param entityType  (optional)
/// @param page  (optional) (default to @0)
/// @param size Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// 
///  code:200 message:"OK"
///
/// @return OAIPageAITransformMappingProjection*
-(NSURLSessionTask*) getTransformerMappingsWithAiTransformId: (NSString*) aiTransformId
    entityId: (NSString*) entityId
    entityType: (NSString*) entityType
    page: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    completionHandler: (void (^)(OAIPageAITransformMappingProjection* output, NSError* error)) handler;


/// Get transformer result
/// Get AI transformer result
///
/// @param _id ID of transform result
/// 
///  code:200 message:"OK"
///
/// @return OAIAITransformResultDto*
-(NSURLSessionTask*) getTransformerResultWithId: (NSString*) _id
    completionHandler: (void (^)(OAIAITransformResultDto* output, NSError* error)) handler;


/// Get transformer results
/// Get AI transformer results
///
/// @param aiTransformId  (optional)
/// @param aiTransformMappingId  (optional)
/// @param entityId  (optional)
/// @param entityType  (optional)
/// @param page  (optional) (default to @0)
/// @param size Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// 
///  code:200 message:"OK"
///
/// @return OAIPageAITransformResultProjection*
-(NSURLSessionTask*) getTransformerResultsWithAiTransformId: (NSString*) aiTransformId
    aiTransformMappingId: (NSString*) aiTransformMappingId
    entityId: (NSString*) entityId
    entityType: (NSString*) entityType
    page: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    completionHandler: (void (^)(OAIPageAITransformResultProjection* output, NSError* error)) handler;


/// List transformers
/// List all AI transforms
///
/// @param page  (optional) (default to @0)
/// @param size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// @param include Optional list of IDs to include in result (optional)
/// 
///  code:200 message:"OK"
///
/// @return OAIPageAITransformProjection*
-(NSURLSessionTask*) getTransformersWithPage: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    include: (NSArray<NSString*>*) include
    completionHandler: (void (^)(OAIPageAITransformProjection* output, NSError* error)) handler;


/// Invoke a transformer
/// Execute an AI transformer to generate structured content
///
/// @param invokeTransformerOptions 
/// 
///  code:200 message:"OK"
///
/// @return OAIConditionalStructuredContentResult*
-(NSURLSessionTask*) invokeTransformerWithInvokeTransformerOptions: (OAIInvokeTransformerOptions*) invokeTransformerOptions
    completionHandler: (void (^)(OAIConditionalStructuredContentResult* output, NSError* error)) handler;


/// Validate structured content schema
/// Check if a schema is valid and can be used to extract data using AI
///
/// @param structuredOutputSchema 
/// 
///  code:200 message:"OK"
///
/// @return OAIStructuredOutputSchemaValidation*
-(NSURLSessionTask*) validateStructuredOutputSchemaWithStructuredOutputSchema: (OAIStructuredOutputSchema*) structuredOutputSchema
    completionHandler: (void (^)(OAIStructuredOutputSchemaValidation* output, NSError* error)) handler;



@end
