#import <Foundation/Foundation.h>
#import "OAIAbstractWebhookPayload.h"
#import "OAICreateWebhookOptions.h"
#import "OAIPageWebhookProjection.h"
#import "OAIPageWebhookResult.h"
#import "OAIWebhookDto.h"
#import "OAIWebhookNewAttachmentPayload.h"
#import "OAIWebhookNewContactPayload.h"
#import "OAIWebhookNewEmailPayload.h"
#import "OAIWebhookResultEntity.h"
#import "OAIWebhookTestResult.h"
#import "OAIApi.h"

/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
*
* The version of the OpenAPI document: 6.5.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIWebhookControllerApi: NSObject <OAIApi>

extern NSString* kOAIWebhookControllerApiErrorDomain;
extern NSInteger kOAIWebhookControllerApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Attach a WebHook URL to an inbox
/// Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
///
/// @param inboxId inboxId
/// @param webhookOptions webhookOptions
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIWebhookDto*
-(NSURLSessionTask*) createWebhookWithInboxId: (NSString*) inboxId
    webhookOptions: (OAICreateWebhookOptions*) webhookOptions
    completionHandler: (void (^)(OAIWebhookDto* output, NSError* error)) handler;


/// Delete and disable a Webhook for an Inbox
/// 
///
/// @param inboxId inboxId
/// @param webhookId webhookId
/// 
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return void
-(NSURLSessionTask*) deleteWebhookWithInboxId: (NSString*) inboxId
    webhookId: (NSString*) webhookId
    completionHandler: (void (^)(NSError* error)) handler;


/// Get results for all webhooks
/// 
///
/// @param page Optional page index in list pagination (optional) (default to @0)
/// @param size Optional page size in list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIPageWebhookResult*
-(NSURLSessionTask*) getAllWebhookResultsWithPage: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    completionHandler: (void (^)(OAIPageWebhookResult* output, NSError* error)) handler;


/// List Webhooks Paginated
/// List webhooks in paginated form. Allows for page index, page size, and sort direction.
///
/// @param page Optional page index in list pagination (optional) (default to @0)
/// @param size Optional page size in list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIPageWebhookProjection*
-(NSURLSessionTask*) getAllWebhooksWithPage: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    completionHandler: (void (^)(OAIPageWebhookProjection* output, NSError* error)) handler;


/// Get test webhook payload example. Response content depends on eventName passed. Uses `EMAIL_RECEIVED` as default.
/// 
///
/// @param eventName eventName (optional)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIAbstractWebhookPayload*
-(NSURLSessionTask*) getTestWebhookPayloadWithEventName: (NSString*) eventName
    completionHandler: (void (^)(OAIAbstractWebhookPayload* output, NSError* error)) handler;


/// Get webhook test payload for new attachment event
/// 
///
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIWebhookNewAttachmentPayload*
-(NSURLSessionTask*) getTestWebhookPayloadNewAttachmentWithCompletionHandler: 
    (void (^)(OAIWebhookNewAttachmentPayload* output, NSError* error)) handler;


/// Get webhook test payload for new contact event
/// 
///
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIWebhookNewContactPayload*
-(NSURLSessionTask*) getTestWebhookPayloadNewContactWithCompletionHandler: 
    (void (^)(OAIWebhookNewContactPayload* output, NSError* error)) handler;


/// Get webhook test payload for new email event
/// 
///
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIWebhookNewEmailPayload*
-(NSURLSessionTask*) getTestWebhookPayloadNewEmailWithCompletionHandler: 
    (void (^)(OAIWebhookNewEmailPayload* output, NSError* error)) handler;


/// Get a webhook for an Inbox
/// 
///
/// @param webhookId webhookId
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIWebhookDto*
-(NSURLSessionTask*) getWebhookWithWebhookId: (NSString*) webhookId
    completionHandler: (void (^)(OAIWebhookDto* output, NSError* error)) handler;


/// Get a webhook result for a webhook
/// 
///
/// @param webhookResultId Webhook Result ID
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIWebhookResultEntity*
-(NSURLSessionTask*) getWebhookResultWithWebhookResultId: (NSString*) webhookResultId
    completionHandler: (void (^)(OAIWebhookResultEntity* output, NSError* error)) handler;


/// Get a webhook results for a webhook
/// 
///
/// @param webhookId ID of webhook to get results for
/// @param page Optional page index in list pagination (optional) (default to @0)
/// @param size Optional page size in list pagination (optional) (default to @20)
/// @param sort Optional createdAt sort direction ASC or DESC (optional) (default to @"ASC")
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIPageWebhookResult*
-(NSURLSessionTask*) getWebhookResultsWithWebhookId: (NSString*) webhookId
    page: (NSNumber*) page
    size: (NSNumber*) size
    sort: (NSString*) sort
    completionHandler: (void (^)(OAIPageWebhookResult* output, NSError* error)) handler;


/// Get all webhooks for an Inbox
/// 
///
/// @param inboxId inboxId
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<OAIWebhookDto>*
-(NSURLSessionTask*) getWebhooksWithInboxId: (NSString*) inboxId
    completionHandler: (void (^)(NSArray<OAIWebhookDto>* output, NSError* error)) handler;


/// Send webhook test data
/// 
///
/// @param webhookId webhookId
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return OAIWebhookTestResult*
-(NSURLSessionTask*) sendTestDataWithWebhookId: (NSString*) webhookId
    completionHandler: (void (^)(OAIWebhookTestResult* output, NSError* error)) handler;



@end
